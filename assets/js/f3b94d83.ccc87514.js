"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1534],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"coreConcepts",title:"Core Concepts"},c=void 0,d={unversionedId:"coreConcepts",id:"coreConcepts",title:"Core Concepts",description:"Access to state is scoped by get and set.",source:"@site/../docs/coreConcepts.md",sourceDirName:".",slug:"/coreConcepts",permalink:"/carry-on/docs/coreConcepts",draft:!1,tags:[],version:"current",lastUpdatedBy:"Russ Panula",lastUpdatedAt:1621993039,formattedLastUpdatedAt:"5/25/2021",frontMatter:{id:"coreConcepts",title:"Core Concepts"},sidebar:"docs",previous:{title:"State Driven Functions",permalink:"/carry-on/docs/stateDrivenFunctions"},next:{title:"deleteStore",permalink:"/carry-on/docs/api/carry-on-store/deleteStore"}},l={},p=[{value:"Access to state is scoped by <code>get</code> and <code>set</code>.",id:"access-to-state-is-scoped-by-get-and-set",level:3},{value:"The state container is synchronous.",id:"the-state-container-is-synchronous",level:3},{value:"<code>State.render</code> maps to a specialized <code>get</code> scope.",id:"staterender-maps-to-a-specialized-get-scope",level:3},{value:"<code>State.render</code> is batched",id:"staterender-is-batched",level:3},{value:"<code>State</code> is initially registered with an unconnected state container.",id:"state-is-initially-registered-with-an-unconnected-state-container",level:3}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"access-to-state-is-scoped-by-get-and-set"},"Access to state is scoped by ",(0,o.kt)("inlineCode",{parentName:"h3"},"get")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"set"),"."),(0,o.kt)("p",null,"Code inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," function has read and write access to state values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'import { set } from "carry-on-store";\n\nconst storeId = "coreSetExample";\n\nset(storeId, state => {\n  state.field1 = 1;\n  state.field2 = 2;\n});\n\nrender(<StateInspector from={storeId} />);\n')),(0,o.kt)("p",null,"Values can be read inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'import { get, set } from "carry-on-store";\n\nconst storeId = "coreGetExample";\n\nset(storeId, state => {\n  state.field1 = 1;\n  state.field2 = 2;\n});\n\nconst values = get(storeId, state => [state.field1, state.field2]);\n// values === [1, 2]\n\nrender(<StateInspector from={storeId} />);\n')),(0,o.kt)("h3",{id:"the-state-container-is-synchronous"},"The state container is synchronous."),(0,o.kt)("p",null,"Execute asynchronous code outside of ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," scopes."),(0,o.kt)("h3",{id:"staterender-maps-to-a-specialized-get-scope"},(0,o.kt)("inlineCode",{parentName:"h3"},"State.render")," maps to a specialized ",(0,o.kt)("inlineCode",{parentName:"h3"},"get")," scope."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"State")," component uses a specialized ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," scope that tracks field access. When changes to the tracked fields are detected, the component is rerendered."),(0,o.kt)("h3",{id:"staterender-is-batched"},(0,o.kt)("inlineCode",{parentName:"h3"},"State.render")," is batched"),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"State")," component affected by a state change will batch update using React's ",(0,o.kt)("inlineCode",{parentName:"p"},"unstable_batchedUpdates")," facility."),(0,o.kt)("h3",{id:"state-is-initially-registered-with-an-unconnected-state-container"},(0,o.kt)("inlineCode",{parentName:"h3"},"State")," is initially registered with an unconnected state container."),(0,o.kt)("p",null,"No access or mutation can occur until the container is connected. The state container is connected by a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"connect"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"set"),"."),(0,o.kt)("p",null,"Initial registrations are queued until the container is connected. Queued registrations are processed in the order specified by the state's ",(0,o.kt)("inlineCode",{parentName:"p"},"priority")," key."),(0,o.kt)("p",null,"The reason a container is initially unconnected is to allow for deterministic registration of middleware registered out of order."))}m.isMDXComponent=!0}}]);