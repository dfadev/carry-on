"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2066],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return r?n.createElement(g,o(o({ref:t},d),{},{components:r})):n.createElement(g,o({ref:t},d))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6302:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={id:"register",title:"register"},l=void 0,p={unversionedId:"api/carry-on-store/register",id:"api/carry-on-store/register",title:"register",description:"register([ { state, middleware, priority } ], storeId)",source:"@site/../docs/api/carry-on-store/register.md",sourceDirName:"api/carry-on-store",slug:"/api/carry-on-store/register",permalink:"/carry-on/docs/api/carry-on-store/register",draft:!1,tags:[],version:"current",lastUpdatedBy:"Russ Panula",lastUpdatedAt:1621922028,formattedLastUpdatedAt:"5/25/2021",frontMatter:{id:"register",title:"register"},sidebar:"docs",previous:{title:"initStores",permalink:"/carry-on/docs/api/carry-on-store/initStores"},next:{title:"set",permalink:"/carry-on/docs/api/carry-on-store/set"}},d={},c=[{value:"<code>register([ { state, middleware, priority } ], storeId)</code>",id:"register--state-middleware-priority---storeid",level:2},{value:"Registering state:",id:"registering-state",level:2}],m={toc:c};function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"register--state-middleware-priority---storeid"},(0,i.kt)("inlineCode",{parentName:"h2"},"register([ { state, middleware, priority } ], storeId)")),(0,i.kt)("p",null,"Register initial state with a store."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"state")),(0,i.kt)("td",{parentName:"tr",align:null},"Function or object that represents the state to register")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"middleware")),(0,i.kt)("td",{parentName:"tr",align:null},"Function that acts as middleware wrapped around an action")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"priority")),(0,i.kt)("td",{parentName:"tr",align:null},"State is registered in a undeterministic order unless a priority is specified. Higher priority state is registered first.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"storeId")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the store to register state in.")))),(0,i.kt)("h2",{id:"registering-state"},"Registering state:"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"set"))," function is used to change state and the ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"get"))," function to retrieve state."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Function"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"set(state => {},"),(0,i.kt)("em",{parentName:"td"},(0,i.kt)("inlineCode",{parentName:"em"},"type")),(0,i.kt)("inlineCode",{parentName:"td"},")")),(0,i.kt)("td",{parentName:"tr",align:null},"Calls a function that mutates the passed state. Optionally specify a string ",(0,i.kt)("inlineCode",{parentName:"td"},"type")," to display when viewing state changes in Dev Tools.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"get(state => {})")),(0,i.kt)("td",{parentName:"tr",align:null},"Calls a function that queries the passed state and returns the result.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { register } from "carry-on-store";\n\nconst state = ({ get, set }) => ({\n  field: "value",\n  change(val) {\n    set(state => {\n      state.field = val;\n    }, "Change Value");\n  },\n  isIt(val) {\n    return get(({ field }) => field === val);\n  }\n});\n\n// register one state\nregister({ state });\n\n// register multiple states\nregister([{ state }, { state }, { state }]);\n\n// register state into a named store\nregister({ state }, "store1");\n\n// can also specify the storeId first\nregister("store1", { state });\n')))}u.isMDXComponent=!0}}]);