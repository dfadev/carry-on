(self.webpackChunk=self.webpackChunk||[]).push([[9852],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>m,kt:()=>c});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,f=u["".concat(d,".").concat(c)]||u[c]||s[c]||o;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},90323:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>l,metadata:()=>d,toc:()=>p,default:()=>s});var r=n(22122),a=n(19756),o=(n(27378),n(3905)),i={id:"Field",title:"<Field>"},l=void 0,d={unversionedId:"api/carry-on-react-forms/Field",id:"api/carry-on-react-forms/Field",isDocsHomePage:!1,title:"<Field>",description:"Render a form field using form helpers passed to the render function.",source:"@site/../docs/api/carry-on-react-forms/Field.md",sourceDirName:"api/carry-on-react-forms",slug:"/api/carry-on-react-forms/Field",permalink:"/carry-on/docs/api/carry-on-react-forms/Field",version:"current",lastUpdatedBy:"Russ Panula",lastUpdatedAt:1625042761,formattedLastUpdatedAt:"6/30/2021",frontMatter:{id:"Field",title:"<Field>"},sidebar:"docs",previous:{title:"withState",permalink:"/carry-on/docs/api/carry-on-react/withState"},next:{title:"<Form>",permalink:"/carry-on/docs/api/carry-on-react-forms/Form"}},p=[{value:"Properties",id:"properties",children:[]}],m={toc:p};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Render a form field using form helpers passed to the render function."),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"render")," or ",(0,o.kt)("inlineCode",{parentName:"td"},"children")),(0,o.kt)("td",{parentName:"tr",align:null},"The render function. This function will be called with the state as it's first parameter.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"from")),(0,o.kt)("td",{parentName:"tr",align:null},"What store to retrieve state from.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"form")),(0,o.kt)("td",{parentName:"tr",align:null},"What form to retrieve state from.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"path")),(0,o.kt)("td",{parentName:"tr",align:null},"The state path to retrieve. Specified as a dotted path string, with support for arrays. Sample: ",(0,o.kt)("inlineCode",{parentName:"td"},'"my.field.path[10].name"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"constant")),(0,o.kt)("td",{parentName:"tr",align:null},"When true, the ",(0,o.kt)("inlineCode",{parentName:"td"},"Field")," component will query state and render only once.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"default")),(0,o.kt)("td",{parentName:"tr",align:null},"The default value when the state is undefined.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"debug")),(0,o.kt)("td",{parentName:"tr",align:null},"When true, log messages regarding state changes will be printed to the ",(0,o.kt)("inlineCode",{parentName:"td"},"console"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"verbose")),(0,o.kt)("td",{parentName:"tr",align:null},"When true, verbose log messages are printed to the ",(0,o.kt)("inlineCode",{parentName:"td"},"console"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"id")),(0,o.kt)("td",{parentName:"tr",align:null},"Debug log uses this to identify components")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"onMount")),(0,o.kt)("td",{parentName:"tr",align:null},"Called with the current state when the component mounts.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"onUnmount")),(0,o.kt)("td",{parentName:"tr",align:null},"Called with the current state when the component unmounts.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"type")),(0,o.kt)("td",{parentName:"tr",align:null},"When type is set to ",(0,o.kt)("inlineCode",{parentName:"td"},"checkbox")," or ",(0,o.kt)("inlineCode",{parentName:"td"},"radio"),", the value is emitted as a ",(0,o.kt)("inlineCode",{parentName:"td"},"checked")," attribute instead of a ",(0,o.kt)("inlineCode",{parentName:"td"},"value")," attribute.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'import { Form, Field, FormButtons, FormState } from "carry-on-react-forms";\n\nconst storeId = "forms";\n\nconst myForm = {\n  id: "examples.Field",\n  initialValues: {\n    field1: "value1",\n    field2: "value2"\n  },\n  onValidate:\n    ({ get, set, id }) =>\n    values => ({\n      errors: {},\n      isValid: true\n    }),\n  onSubmit:\n    ({ get, set, id }) =>\n    values => {\n      alert(JSON.stringify(values));\n    }\n};\n\nrender(\n  <Form {...myForm} from={storeId}>\n    {/* Form Controls */}\n    <Field path="field1">{({ element }) => <input {...element} />}</Field>\n    <Field path="field2">{({ element }) => <input {...element} />}</Field>\n    <FormButtons>\n      {({ submit, reset }) => (\n        <>\n          <div>\n            <button {...submit}>Submit</button>\n            <button {...reset}>Reset</button>\n          </div>\n        </>\n      )}\n    </FormButtons>\n    {/********************/}\n\n    {/* State Inspectors */}\n    <h4>State:</h4>\n    <h5>field1:</h5>\n    <Field path="field1">{field => <Inspector data={field} />}</Field>\n    <h5>field2:</h5>\n    <Field path="field2">{field => <Inspector data={field} />}</Field>\n    <FormButtons>\n      {({ submit, reset }) => (\n        <>\n          <h5>\n            <i>submit</i>:\n          </h5>\n          <Inspector data={submit} />\n          <h5>\n            <i>reset</i>:\n          </h5>\n          <Inspector data={reset} />\n        </>\n      )}\n    </FormButtons>\n    <FormState>\n      {form => (\n        <>\n          <h5>Form state:</h5>\n          <Inspector data={form} />\n        </>\n      )}\n    </FormState>\n    <h5>Store state:</h5>\n    <StateInspector from={storeId} />\n    {/********************/}\n  </Form>\n);\n')))}s.isMDXComponent=!0}}]);