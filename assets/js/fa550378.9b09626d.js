(self.webpackChunk=self.webpackChunk||[]).push([[4824],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,v=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(v,l(l({ref:t},c),{},{components:n})):a.createElement(v,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},49298:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>l,contentTitle:()=>o,metadata:()=>s,toc:()=>d,default:()=>p});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),l={id:"usingState",title:"Using State"},o=void 0,s={unversionedId:"usingState",id:"usingState",isDocsHomePage:!1,title:"Using State",description:"Import",source:"@site/../docs/usingState.md",sourceDirName:".",slug:"/usingState",permalink:"/carry-on/docs/usingState",version:"current",lastUpdatedBy:"Russ Panula",lastUpdatedAt:1621819611,formattedLastUpdatedAt:"5/23/2021",frontMatter:{id:"usingState",title:"Using State"},sidebar:"docs",previous:{title:"Registering State",permalink:"/carry-on/docs/registeringState"},next:{title:"Composing State",permalink:"/carry-on/docs/composingState"}},d=[{value:"Import",id:"import",children:[]},{value:"Basic usage",id:"basic-usage",children:[{value:"Default store",id:"default-store",children:[]},{value:"Named store",id:"named-store",children:[]}]},{value:"Access tracking",id:"access-tracking",children:[{value:"Strict",id:"strict",children:[]}]},{value:"Constant",id:"constant",children:[]},{value:"Path",id:"path",children:[]},{value:"Select",id:"select",children:[]},{value:"Default value",id:"default-value",children:[]},{value:"Delayed updates",id:"delayed-updates",children:[{value:"Throttle",id:"throttle",children:[]},{value:"Debounce",id:"debounce",children:[]}]},{value:"Debugging",id:"debugging",children:[{value:"Global",id:"global",children:[]}]},{value:"Lifecycle Events",id:"lifecycle-events",children:[]},{value:"carryOn factory",id:"carryon-factory",children:[]}],c={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"import"},"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { State } from "carry-on-react";\n')),(0,i.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,i.kt)("h3",{id:"default-store"},"Default store"),(0,i.kt)("p",null,"The child node of a ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," component is a render function. The render function\nis given the store state as it's first parameter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State>{state => state.field1}</State>);\n')),(0,i.kt)("h3",{id:"named-store"},"Named store"),(0,i.kt)("p",null,"A named store can be accessed using the ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register("Store1", { state: { field1: "value" } });\n\nrender(<State from="Store1">{state => state.field1}</State>);\n')),(0,i.kt)("h2",{id:"access-tracking"},"Access tracking"),(0,i.kt)("p",null,"In the above examples there are no selectors indicating which fields the ",(0,i.kt)("inlineCode",{parentName:"p"},"State"),"\ncomponent should subscribe to. This is because when the render function is\nexecuted the state is monitored for usage via a Proxy. The usage tracking is\nthen used to determine which state fields will cause the ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," component to\nupdate."),(0,i.kt)("p",null,"In the next example, the first ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," component will update when ",(0,i.kt)("inlineCode",{parentName:"p"},"field1"),"\nchanges, and the second ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," component will update when ",(0,i.kt)("inlineCode",{parentName:"p"},"field2")," changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value", field2: "value" } });\n\nrender(\n  <div>\n    <State>{state => <div>{state.field1}</div>}</State>\n    <State>{state => <div>{state.field2}</div>}</State>\n  </div>\n);\n')),(0,i.kt)("h3",{id:"strict"},"Strict"),(0,i.kt)("p",null,"The list of monitored state fields does not change once created. You can force\nevery render to be monitored by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"strict")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State strict>{state => <div>{state.field1}</div>}</State>);\n')),(0,i.kt)("h2",{id:"constant"},"Constant"),(0,i.kt)("p",null,"If the state needed is constant, the ",(0,i.kt)("inlineCode",{parentName:"p"},"constant")," property will prevent any\nrender updates after the first render."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State constant>{state => <div>{state.field1}</div>}</State>);\n')),(0,i.kt)("h2",{id:"path"},"Path"),(0,i.kt)("p",null,"A string ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," property can be used to choose a specific object or value. Dotted paths and indexes are supported."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State path="field1">{field1 => <div>{field1}</div>}</State>);\n')),(0,i.kt)("h2",{id:"select"},"Select"),(0,i.kt)("p",null,"An optional selector can be used with the ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," property. When the ",(0,i.kt)("inlineCode",{parentName:"p"},"select"),"\nproperty is used, access tracking will be applied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," function and\nnot the render function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(\n  <State select={state => state.field1}>{field1 => <div>{field1}</div>}</State>\n);\n')),(0,i.kt)("h2",{id:"default-value"},"Default value"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," property lets you subsitute a default state value when the store state specified by the path property is undefined."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'render(\n  <State\n    id="defaultValueExample"\n    from="unknownStore"\n    path="unknownField"\n    default="Undefined field."\n  >\n    {field => <div>{field}</div>}\n  </State>\n);\n')),(0,i.kt)("h2",{id:"delayed-updates"},"Delayed updates"),(0,i.kt)("p",null,"In some cases, state change updates may arrive too quickly for a component to\nsensibly make use of. The ",(0,i.kt)("inlineCode",{parentName:"p"},"throttle")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"debounce")," properties will apply the\ncorresponding delay to any state change updates a ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," component is\nsubscribed to."),(0,i.kt)("h3",{id:"throttle"},"Throttle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'const eventHandler = e => {\n  set(state => {\n    state.mouseX = e.clientX;\n    state.mouseY = e.clientY;\n  });\n};\n\ndocument.addEventListener("mousemove", eventHandler);\n\nrender(\n  <State\n    throttle={500}\n    onUnmount={() => {\n      document.removeEventListener("mousemove", eventHandler);\n    }}\n  >\n    {state => (\n      <div>\n        {state.mouseX}, {state.mouseY}\n      </div>\n    )}\n  </State>\n);\n')),(0,i.kt)("h3",{id:"debounce"},"Debounce"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'const eventHandler = e => {\n  set(state => {\n    state.mouseX = e.clientX;\n    state.mouseY = e.clientY;\n  });\n};\n\ndocument.addEventListener("mousemove", eventHandler);\n\nrender(\n  <State\n    debounce={500}\n    onUnmount={() => {\n      document.removeEventListener("mousemove", eventHandler);\n    }}\n  >\n    {state => (\n      <div>\n        {state.mouseX}, {state.mouseY}\n      </div>\n    )}\n  </State>\n);\n')),(0,i.kt)("h2",{id:"debugging"},"Debugging"),(0,i.kt)("p",null,"Three properties are available for debugging. Debug messages are sent to the console."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"debug")," will log debug messages.\n",(0,i.kt)("inlineCode",{parentName:"p"},"verbose")," will log verbose debug messages.\n",(0,i.kt)("inlineCode",{parentName:"p"},"id")," will set an identifier to include in the log messages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(\n  <State debug verbose id="Field div">\n    {state => <div>{state.field1}</div>}\n  </State>\n);\n')),(0,i.kt)("h3",{id:"global"},"Global"),(0,i.kt)("p",null,"Debugging can be turned on or off for all ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," components:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"State.Debug = true;\nState.Verbose = true;\n")),(0,i.kt)("h2",{id:"lifecycle-events"},"Lifecycle Events"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onMount")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onUnmount")," properties when you need to execute\nactions during those lifecycle events."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(\n  <State\n    onMount={state => {\n      console.log("State mounted", state);\n    }}\n    onUnmount={state => {\n      console.log("State unmounted", state);\n    }}\n  >\n    {state => <div>{state.field1}</div>}\n  </State>\n);\n')),(0,i.kt)("h2",{id:"carryon-factory"},"carryOn factory"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"carryOn")," factory function is available as shorthand for a typical stateful component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'import { carryOn } from "carry-on-react";\n\nconst Nav = carryOn((props, state) => (\n  <ul>\n    {state.site.nav.map(item => (\n      <li key={item}>{item}</li>\n    ))}\n  </ul>\n));\n\nconst Menu = carryOn((props, state) => (\n  <ul>\n    {state.site.menu.map(item => (\n      <li key={item}>{item}</li>\n    ))}\n  </ul>\n));\n\nconst Content = carryOn((props, state) => <div>{state.site.content}</div>);\n\nconst App = carryOn(\n  // Use object parameter to specify State properties\n  {\n    // id is used for log messages and the component\'s displayName\n    id: "App",\n    // use of register property:\n    register: {\n      state: {\n        site: {\n          components: {\n            nav: Nav,\n            menu: Menu,\n            content: Content\n          },\n          menu: ["one", "two", "three"],\n          nav: ["a", "b", "c"],\n          content: "The content"\n        }\n      }\n    },\n    // components dont change\n    constant: true\n  },\n  // Use function parameter to specify render function\n  (\n    // Component props\n    { title, className },\n    // Store state\n    {\n      site: {\n        components: { nav: Nav, menu: Menu, content: Content }\n      }\n    }\n  ) => (\n    <div className={className}>\n      <h1>{title}</h1>\n      <Nav />\n      <Menu />\n      <div>\n        <Content />\n      </div>\n    </div>\n  )\n);\n\nrender(<App />);\n')))}p.isMDXComponent=!0}}]);