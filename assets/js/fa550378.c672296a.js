"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4824],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=l,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),i=["components"],o={id:"usingState",title:"Using State"},s=void 0,d={unversionedId:"usingState",id:"usingState",title:"Using State",description:"Import",source:"@site/../docs/usingState.md",sourceDirName:".",slug:"/usingState",permalink:"/carry-on/docs/usingState",draft:!1,tags:[],version:"current",lastUpdatedBy:"Russ Panula",lastUpdatedAt:1653281448,formattedLastUpdatedAt:"5/23/2022",frontMatter:{id:"usingState",title:"Using State"},sidebar:"docs",previous:{title:"Registering State",permalink:"/carry-on/docs/registeringState"},next:{title:"Composing State",permalink:"/carry-on/docs/composingState"}},u={},p=[{value:"Import",id:"import",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Default store",id:"default-store",level:3},{value:"Named store",id:"named-store",level:3},{value:"Use Hook",id:"use-hook",level:3},{value:"Access tracking",id:"access-tracking",level:2},{value:"Strict",id:"strict",level:3},{value:"Constant",id:"constant",level:2},{value:"Path",id:"path",level:2},{value:"Select",id:"select",level:2},{value:"Default value",id:"default-value",level:2},{value:"Delayed updates",id:"delayed-updates",level:2},{value:"Throttle",id:"throttle",level:3},{value:"Debounce",id:"debounce",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Global Debugging",id:"global-debugging",level:3},{value:"Lifecycle Events",id:"lifecycle-events",level:2}],c={toc:p};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { State } from "carry-on-react";\n')),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("h3",{id:"default-store"},"Default store"),(0,r.kt)("p",null,"The child node of a ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," component is a render function. The render function\nis given the store state as it's first parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State>{state => state.field1}</State>);\n')),(0,r.kt)("h3",{id:"named-store"},"Named store"),(0,r.kt)("p",null,"A named store can be accessed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register("Store1", { state: { field1: "value" } });\n\nrender(<State from="Store1">{state => state.field1}</State>);\n')),(0,r.kt)("h3",{id:"use-hook"},"Use Hook"),(0,r.kt)("p",null,"Functional components have the ",(0,r.kt)("inlineCode",{parentName:"p"},"useCarryOn")," hook to access state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'const Component = () => {\n  const [field1, set] = useCarryOn({\n    from: "Store1",\n    register: {\n      state: {\n        field1: "value"\n      }\n    },\n    select: state => state.field1\n  });\n  return <div>{field1}</div>;\n};\n\nrender(\n  <>\n    <Component />\n    <StateInspector from="Store1" />\n  </>\n);\n')),(0,r.kt)("h2",{id:"access-tracking"},"Access tracking"),(0,r.kt)("p",null,"When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," component, selectors indicating which fields should be subscribed to are optional. This is because when the render function executes the state is monitored for usage via a ",(0,r.kt)("inlineCode",{parentName:"p"},"Proxy"),". The usage tracking is\nthen used to determine which state fields will cause the ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," component to\nupdate."),(0,r.kt)("p",null,"In the next example, the first ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," component will update when ",(0,r.kt)("inlineCode",{parentName:"p"},"field1"),"\nchanges, and the second ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," component will update when ",(0,r.kt)("inlineCode",{parentName:"p"},"field2")," changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value", field2: "value" } });\n\nrender(\n  <div>\n    <State>{state => <div>{state.field1}</div>}</State>\n    <State>{state => <div>{state.field2}</div>}</State>\n  </div>\n);\n')),(0,r.kt)("h3",{id:"strict"},"Strict"),(0,r.kt)("p",null,"The list of monitored state fields does not change once created. You can force\nevery render to be monitored by specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"strict")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State strict>{state => <div>{state.field1}</div>}</State>);\n')),(0,r.kt)("h2",{id:"constant"},"Constant"),(0,r.kt)("p",null,"If the state needed is constant, the ",(0,r.kt)("inlineCode",{parentName:"p"},"constant")," property will prevent any\nrender updates after the first render."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State constant>{state => <div>{state.field1}</div>}</State>);\n')),(0,r.kt)("h2",{id:"path"},"Path"),(0,r.kt)("p",null,"A string ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," property can be used to choose a specific object or value. Dotted paths and indexes are supported."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(<State path="field1">{field1 => <div>{field1}</div>}</State>);\n')),(0,r.kt)("h2",{id:"select"},"Select"),(0,r.kt)("p",null,"An optional selector can be used with the ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," property. When the ",(0,r.kt)("inlineCode",{parentName:"p"},"select"),"\nproperty is used, access tracking will be applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," function and\nnot the render function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(\n  <State select={state => state.field1}>{field1 => <div>{field1}</div>}</State>\n);\n')),(0,r.kt)("h2",{id:"default-value"},"Default value"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," property lets you subsitute a default state value when the store state specified by the path property is undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'render(\n  <State\n    id="defaultValueExample"\n    from="unknownStore"\n    path="unknownField"\n    default="Undefined field."\n  >\n    {field => <div>{field}</div>}\n  </State>\n);\n')),(0,r.kt)("h2",{id:"delayed-updates"},"Delayed updates"),(0,r.kt)("p",null,"In some cases, state change updates may arrive too quickly for a component to\nsensibly make use of. The ",(0,r.kt)("inlineCode",{parentName:"p"},"throttle")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"debounce")," properties will apply the\ncorresponding delay to any state change updates a ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," component is\nsubscribed to."),(0,r.kt)("h3",{id:"throttle"},"Throttle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'const eventHandler = e => {\n  set(state => {\n    state.mouseX = e.clientX;\n    state.mouseY = e.clientY;\n  });\n};\n\ndocument.addEventListener("mousemove", eventHandler);\n\nrender(\n  <State\n    throttle={500}\n    onUnmount={() => {\n      document.removeEventListener("mousemove", eventHandler);\n    }}\n  >\n    {state => (\n      <div>\n        {state.mouseX}, {state.mouseY}\n      </div>\n    )}\n  </State>\n);\n')),(0,r.kt)("h3",{id:"debounce"},"Debounce"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'const eventHandler = e => {\n  set(state => {\n    state.mouseX = e.clientX;\n    state.mouseY = e.clientY;\n  });\n};\n\ndocument.addEventListener("mousemove", eventHandler);\n\nrender(\n  <State\n    debounce={500}\n    onUnmount={() => {\n      document.removeEventListener("mousemove", eventHandler);\n    }}\n  >\n    {state => (\n      <div>\n        {state.mouseX}, {state.mouseY}\n      </div>\n    )}\n  </State>\n);\n')),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"Three properties are available for debugging. Debug messages are sent to the console."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"debug")," will log debug messages.\n",(0,r.kt)("inlineCode",{parentName:"p"},"verbose")," will log verbose debug messages.\n",(0,r.kt)("inlineCode",{parentName:"p"},"id")," will set an identifier to include in the log messages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(\n  <State debug verbose id="Field div">\n    {state => <div>{state.field1}</div>}\n  </State>\n);\n')),(0,r.kt)("h3",{id:"global-debugging"},"Global Debugging"),(0,r.kt)("p",null,"Debugging can be turned on or off for all ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"State.Debug = true;\nState.Verbose = true;\n")),(0,r.kt)("h2",{id:"lifecycle-events"},"Lifecycle Events"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onMount")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onUnmount")," properties when you need to execute\nactions during those lifecycle events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"live noInline",live:!0,noInline:!0},'register({ state: { field1: "value" } });\n\nrender(\n  <State\n    onMount={state => {\n      console.log("State mounted", state);\n    }}\n    onUnmount={state => {\n      console.log("State unmounted", state);\n    }}\n  >\n    {state => <div>{state.field1}</div>}\n  </State>\n);\n')))}m.isMDXComponent=!0}}]);